name: CI/CD Pipeline

permissions:
  id-token: write # Required for the OIDC Login
  contents: read # Required for repo checkout

on:
  push:
    branches: [ main, dev/* ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  AZURE_FUNCTIONAPP_NAME: 'mp-dev-functions'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './packages/backend'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build packages
      run: npm run build

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: lint-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run npm security audit
      run: npm audit --audit-level=moderate --production
      continue-on-error: true

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run ESLint security rules
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx --format=json --output-file=eslint-results.json || true
        if [ -f eslint-results.json ]; then
          echo "ESLint results generated"
          cat eslint-results.json
        fi

  deploy-infrastructure:
    uses: ./.github/workflows/deploy-bicep-deployments.yaml
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    with:
      environment: 'production'
      pattern: '.*'
    secrets: inherit

  deploy-backend:
    runs-on: ubuntu-latest
    name: Deploy Backend
    needs: deploy-infrastructure  # Wait for infrastructure deployment first
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build backend
      run: npm run build --workspace=packages/backend

    - name: Azure login via OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ vars.APP_ID }}
        tenant-id: ${{ vars.TENANT_ID }}
        subscription-id: ${{ vars.SUBSCRIPTION_ID }}

    - name: Deploy to Azure Functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}

  # deploy-frontend:
  #   runs-on: ubuntu-latest
  #   name: Deploy Frontend
  #   needs: deploy-backend  # Wait for backend deployment
  #   if: github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: ${{ env.NODE_VERSION }}
  #       cache: 'npm'

  #   - name: Install dependencies
  #     run: npm ci

  #   - name: Build frontend
  #     run: npm run build --workspace=packages/frontend
  #     env:
  #       VITE_API_BASE_URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net

  #   - name: Deploy to Azure Static Web Apps
  #     uses: Azure/static-web-apps-deploy@v1
  #     with:
  #       azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
  #       repo_token: ${{ secrets.GITHUB_TOKEN }}
  #       action: 'upload'
  #       app_location: './packages/frontend'
  #       output_location: 'dist'